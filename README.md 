# **MetaKeep Embedded Wallet - Transaction Signing Application**

## **Overview**
This project enables developers to create and share one-off transaction links for end users to sign and submit transactions using the MetaKeep Embedded Wallet Web SDK. It supports blockchain interactions with a professional UI and optional telemetry tracking. The application is deployed and accessible at http://18.234.174.148:3000/.

---

## **Architecture**
The application follows a multi-tier architecture:
- **Frontend (React + TailwindCSS)**
  - User Interface for creating and signing transactions.
  - Interacts with MetaKeep SDK for wallet and transaction operations.

- **Backend (Node.js/Express)**
  - Manages requests, API endpoints, and transaction logic.
  - Interacts with MetaKeep SDK and blockchain network.
  - Includes infra setup for AWS Lambda and DynamoDB.
  - Functions: `createTransaction`, `sendTransaction`, `telemetryTracking`

- **Blockchain**
  - Deployed on Polygon Mumbai Testnet using Hardhat.
  - Smart Contracts written in Solidity.
  - Uses MetaKeep’s `getWallet` and `signTransaction` for wallet and transaction interactions.

- **Telemetry Tracking (AWS Lambda + DynamoDB)**
  - Optional tracking of user interactions.
  - Stores data securely in AWS.

---

## **Folder Structure**
```
MetaKeep-Transaction-App
├── blockchain
│   ├── contracts                    // Solidity Smart Contracts
│   ├── scripts                      // Hardhat deployment scripts
│   ├── hardhat.config.js            // Hardhat Configuration
│   └── contract-abi.json            // ABI for Contract Interactions
│
├── backend
│   ├── infra                        // AWS Lambda & DynamoDB Setup
│   └── functions                    // Core API Functions
│
├── src
│   ├── components                   // React components
│   ├── services                     // API interaction services
│   ├── App.js                       // Main component
│   ├── index.js                     // Entry point
│   ├── tailwind.config.js           // Tailwind CSS config
│   ├── package.json                 // Project dependencies
│   └── README.md                    // Documentation
```

---

## **SDK Functions & Web APIs**
### MetaKeep SDK
1. **getWallet**
   - Retrieves a wallet instance for the user.
   - Enables account-based interactions.

2. **signTransaction**
   - Signs transactions using the wallet’s private key.
   - Generates a signature for blockchain transactions.

---

## **Smart Contract Deployment (Polygon Mumbai)**
1. Ensure Hardhat is installed:
   ```bash
   npm install --save-dev hardhat
   ```
2. Compile and deploy the contract:
   ```bash
   npx hardhat compile
   npx hardhat run scripts/deploy.js --network mumbai
   ```
3. Verify deployment:
   - Contract address is displayed on successful deployment.
   - Update `contract-abi.json` for interactions.

---

## **Deployment Guide (EC2 Instance)**
1. **Prepare the EC2 Instance**
   - Launch an EC2 instance (ubuntu 2023).
   - Allow ports 22 (SSH), 80 (HTTP), and 3000 (App).
   - SSH into the instance using:
     ```bash
     ssh -i "my-key.pem" ec2-user@<EC2_PUBLIC_IP>
     ```

2. **Install Dependencies**
   ```bash
   sudo yum update -y
   sudo yum install git -y
   curl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -
   sudo yum install nodejs -y
   sudo npm install -g pm2
   ```

3. **Clone the Repository**
   ```bash
   git clone https://github.com/Aryans1729/Metakeep_Task.git
   cd MetaKeep_Task
   npm install
   ```

4. **Environment Variables**
   Create a `.env` file in the root directory:
   ```bash
   METAKEEP_CLIENT_ID=<Your Client ID>
   METAKEEP_API_KEY=<Your API Key>
   BLOCKCHAIN_NETWORK=mumbai
   ```

5. **Start the Application**
   ```bash
   npm run build
   pm2 start npm --name "metakeep-app" -- start
   pm2 save
   pm2 startup
   ```

6. **Access the Application**
   Visit `http://18.234.174.148:3000/` in your browser.

---

## **Developer View**
1. Generate a transaction link for users to sign transactions.
2. Call MetaKeep APIs for wallet and transaction handling.
3. Use the SDK to create and sign transactions with user wallets.

---

## **User View**
1. Access the transaction page and connect wallet.
2. Sign and confirm transactions securely.
3. View transaction details (transaction hash, amount, status).

---

## **Sample Workflow**
1. User accesses the application.
2. Application calls `getWallet` to retrieve wallet info.
3. User initiates a transaction.
4. `signTransaction` API signs the transaction using MetaKeep.
5. Application broadcasts the transaction to the blockchain.
6. Confirmation received, and transaction details are displayed.

---

## **Contributing**
Feel free to create issues, fork the repo, and submit pull requests.

---

## **License**
This project is licensed under MIT License.

